/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { FunctionFragment, Result } from "@ethersproject/abi";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  CallOverrides,
  ethers,
  PopulatedTransaction,
  Signer,
} from "ethers";
import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";

interface StateViewInterface extends ethers.utils.Interface {
  functions: {
    "getFeeGrowthGlobals(bytes32)": FunctionFragment;
    "getFeeGrowthInside(bytes32,int24,int24)": FunctionFragment;
    "getLiquidity(bytes32)": FunctionFragment;
    "getPositionInfo(bytes32,bytes32)": FunctionFragment;
    "getPositionLiquidity(bytes32,bytes32)": FunctionFragment;
    "getSlot0(bytes32)": FunctionFragment;
    "getTickBitmap(bytes32,int16)": FunctionFragment;
    "getTickFeeGrowthOutside(bytes32,int24)": FunctionFragment;
    "getTickInfo(bytes32,int24)": FunctionFragment;
    "getTickLiquidity(bytes32,int24)": FunctionFragment;
    "poolManager()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getFeeGrowthGlobals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeGrowthInside",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidity",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionInfo",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionLiquidity",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getSlot0", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getTickBitmap",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTickFeeGrowthOutside",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTickInfo",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTickLiquidity",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolManager",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getFeeGrowthGlobals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeGrowthInside",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSlot0", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTickBitmap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTickFeeGrowthOutside",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTickInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTickLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolManager",
    data: BytesLike
  ): Result;

  events: {};
}

export class StateView extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StateViewInterface;

  functions: {
    getFeeGrowthGlobals(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeGrowthGlobal0: BigNumber;
        feeGrowthGlobal1: BigNumber;
      }
    >;

    getFeeGrowthInside(
      poolId: BytesLike,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeGrowthInside0X128: BigNumber;
        feeGrowthInside1X128: BigNumber;
      }
    >;

    getLiquidity(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidity: BigNumber }>;

    "getPositionInfo(bytes32,bytes32)"(
      poolId: BytesLike,
      positionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        feeGrowthInside0LastX128: BigNumber;
        feeGrowthInside1LastX128: BigNumber;
      }
    >;

    "getPositionInfo(bytes32,address,int24,int24,bytes32)"(
      poolId: BytesLike,
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        feeGrowthInside0LastX128: BigNumber;
        feeGrowthInside1LastX128: BigNumber;
      }
    >;

    getPositionLiquidity(
      poolId: BytesLike,
      positionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidity: BigNumber }>;

    getSlot0(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number] & {
        sqrtPriceX96: BigNumber;
        tick: number;
        protocolFee: number;
        lpFee: number;
      }
    >;

    getTickBitmap(
      poolId: BytesLike,
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tickBitmap: BigNumber }>;

    getTickFeeGrowthOutside(
      poolId: BytesLike,
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeGrowthOutside0X128: BigNumber;
        feeGrowthOutside1X128: BigNumber;
      }
    >;

    getTickInfo(
      poolId: BytesLike,
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidityGross: BigNumber;
        liquidityNet: BigNumber;
        feeGrowthOutside0X128: BigNumber;
        feeGrowthOutside1X128: BigNumber;
      }
    >;

    getTickLiquidity(
      poolId: BytesLike,
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        liquidityGross: BigNumber;
        liquidityNet: BigNumber;
      }
    >;

    poolManager(overrides?: CallOverrides): Promise<[string]>;
  };

  getFeeGrowthGlobals(
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      feeGrowthGlobal0: BigNumber;
      feeGrowthGlobal1: BigNumber;
    }
  >;

  getFeeGrowthInside(
    poolId: BytesLike,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      feeGrowthInside0X128: BigNumber;
      feeGrowthInside1X128: BigNumber;
    }
  >;

  getLiquidity(
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPositionInfo(bytes32,bytes32)"(
    poolId: BytesLike,
    positionId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      liquidity: BigNumber;
      feeGrowthInside0LastX128: BigNumber;
      feeGrowthInside1LastX128: BigNumber;
    }
  >;

  "getPositionInfo(bytes32,address,int24,int24,bytes32)"(
    poolId: BytesLike,
    owner: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    salt: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      liquidity: BigNumber;
      feeGrowthInside0LastX128: BigNumber;
      feeGrowthInside1LastX128: BigNumber;
    }
  >;

  getPositionLiquidity(
    poolId: BytesLike,
    positionId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSlot0(
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number] & {
      sqrtPriceX96: BigNumber;
      tick: number;
      protocolFee: number;
      lpFee: number;
    }
  >;

  getTickBitmap(
    poolId: BytesLike,
    tick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTickFeeGrowthOutside(
    poolId: BytesLike,
    tick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      feeGrowthOutside0X128: BigNumber;
      feeGrowthOutside1X128: BigNumber;
    }
  >;

  getTickInfo(
    poolId: BytesLike,
    tick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      liquidityGross: BigNumber;
      liquidityNet: BigNumber;
      feeGrowthOutside0X128: BigNumber;
      feeGrowthOutside1X128: BigNumber;
    }
  >;

  getTickLiquidity(
    poolId: BytesLike,
    tick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      liquidityGross: BigNumber;
      liquidityNet: BigNumber;
    }
  >;

  poolManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getFeeGrowthGlobals(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeGrowthGlobal0: BigNumber;
        feeGrowthGlobal1: BigNumber;
      }
    >;

    getFeeGrowthInside(
      poolId: BytesLike,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeGrowthInside0X128: BigNumber;
        feeGrowthInside1X128: BigNumber;
      }
    >;

    getLiquidity(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPositionInfo(bytes32,bytes32)"(
      poolId: BytesLike,
      positionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        feeGrowthInside0LastX128: BigNumber;
        feeGrowthInside1LastX128: BigNumber;
      }
    >;

    "getPositionInfo(bytes32,address,int24,int24,bytes32)"(
      poolId: BytesLike,
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        feeGrowthInside0LastX128: BigNumber;
        feeGrowthInside1LastX128: BigNumber;
      }
    >;

    getPositionLiquidity(
      poolId: BytesLike,
      positionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSlot0(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number] & {
        sqrtPriceX96: BigNumber;
        tick: number;
        protocolFee: number;
        lpFee: number;
      }
    >;

    getTickBitmap(
      poolId: BytesLike,
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTickFeeGrowthOutside(
      poolId: BytesLike,
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeGrowthOutside0X128: BigNumber;
        feeGrowthOutside1X128: BigNumber;
      }
    >;

    getTickInfo(
      poolId: BytesLike,
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidityGross: BigNumber;
        liquidityNet: BigNumber;
        feeGrowthOutside0X128: BigNumber;
        feeGrowthOutside1X128: BigNumber;
      }
    >;

    getTickLiquidity(
      poolId: BytesLike,
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        liquidityGross: BigNumber;
        liquidityNet: BigNumber;
      }
    >;

    poolManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getFeeGrowthGlobals(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeGrowthInside(
      poolId: BytesLike,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidity(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPositionInfo(bytes32,bytes32)"(
      poolId: BytesLike,
      positionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPositionInfo(bytes32,address,int24,int24,bytes32)"(
      poolId: BytesLike,
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionLiquidity(
      poolId: BytesLike,
      positionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSlot0(poolId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getTickBitmap(
      poolId: BytesLike,
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTickFeeGrowthOutside(
      poolId: BytesLike,
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTickInfo(
      poolId: BytesLike,
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTickLiquidity(
      poolId: BytesLike,
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getFeeGrowthGlobals(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeGrowthInside(
      poolId: BytesLike,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidity(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPositionInfo(bytes32,bytes32)"(
      poolId: BytesLike,
      positionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPositionInfo(bytes32,address,int24,int24,bytes32)"(
      poolId: BytesLike,
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionLiquidity(
      poolId: BytesLike,
      positionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSlot0(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTickBitmap(
      poolId: BytesLike,
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTickFeeGrowthOutside(
      poolId: BytesLike,
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTickInfo(
      poolId: BytesLike,
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTickLiquidity(
      poolId: BytesLike,
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
